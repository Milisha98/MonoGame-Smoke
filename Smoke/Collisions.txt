
At the moment my collision system works as following:

1) Clayton's Rectangle that encompasses Rocket
	- If this does not get hit, I do not consider more invasive collision detection

2) If Clayton's gets 'hit' then I have an array of rectangles around my rocket at protruding points
	- These scale and rotate with the rocket

3) Returns the location of the rectangle that got hit
	- Allows me to draw an explosion in the correct location

Please note:
- It's possible on a very slow computer that the a small, fast projectile could make it through a another object 'between frames'
- If this happens, then consider Future Options below



== Future Options ==

https://web.archive.org/web/20191208231225/https://wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/

-- What I like:
. Only applies to objects in motion.
. Draw a box from where it is now, to where it will be in the next frame.
	. Get a list of objects within that box
	. Need to calculate the current vectors to see whether they will meet in the next frame


More research:
	Quad Tree Collision

Seems to have code to determine if two vectors will intercept
https://community.monogame.net/t/why-rotate-a-sprite-is-simple-and-rotate-a-rectangle-is-damn-complex/7694/14

Cool library (and screenshot!)
https://github.com/tainicom/Aether.Physics2D